
@online{ardis_et_al_2000,
	urldate = {2011-07-26},
	title = {Software product lines: a case study},
	url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.117.3309&rep=rep1&type=pdf},
	author = {Ardis, Mmmm and Daley, Nigel and Hoffman, Daniel and Siy, Harvey and Weiss, David},
	year = {2000}
},


@inproceedings{huang_towards_2003,
	address = {New York, {NY}, {USA}},
	series = {{SIGDOC} '03},
	title = {Towards a documentation maturity model},
	isbn = {{1-58113-696-X}},
	location = {San Francisco, {CA}, {USA}},
	doi = {10.1145/944868.944888},
	abstract = {This paper presents preliminary work towards a maturity model for system documentation. The Documentation Maturity Model {(DMM)} is specifically targeted towards assessing the quality of documentation used in aiding program understanding. Software engineers and technical writers produce such documentation during regular product development lifecycles. The documentation can also be recreated after the fact via reverse engineering. The {DMM} has both process and product components; this paper focuses on the product quality aspects.},
	booktitle = {Proceedings of the 21st annual international conference on Documentation},
	publisher = {{ACM}},
	author = {Huang, Someone and Tilley, S.},
	day = {20},
	month = aug,
	year = {2003},
	note = {{ACM} {ID:} 944888},
	keywords = {documentation},
	pages = {93–99}
},

@inproceedings{de_souza_study_2005,
	address = {New York, {NY}, {USA}},
	series = {{SIGDOC} '05},
	title = {A study of the documentation essential to software maintenance},
	isbn = {1-59593-175-9},
	location = {Coventry, United Kingdom},
	doi = {10.1145/1085313.1085331},
	abstract = {Software engineering has been striving for years to improve the practice of software development and maintenance. Documentation has long been prominent on the list of recommended practices to improve development and help maintenance. Recently however, agile methods started to shake this view, arguing that the goal of the game is to produce software and that documentation is only useful as long as it helps to reach this {goal.On} the other hand, in the re-engineering field, people wish they could re-document useful legacy software so that they may continue maintain them or migrate them to new {platform.In} these two case, a crucial question arises: {"How} much documentation is enough?" In this article, we present the results of a survey of software maintainers to try to establish what documentation artifacts are the most useful to them.},
	booktitle = {Proceedings of the 23rd annual international conference on Design of communication: documenting \& designing for pervasive information},
	publisher = {{ACM}},
	author = {de Souza, S. and Anquetil, N. and de Oliveira, K.},
	year = {2005},
	note = {{ACM} {ID:} 1085331},
	keywords = {documentation, empirical study, general},
	pages = {68–75}
},


@inproceedings{forward_relevance_2002,
	address = {New York, {NY}, {USA}},
	series = {{DocEng} '02},
	title = {The relevance of software documentation, tools and technologies: a survey},
	isbn = {1-58113-594-7},
	location = {{McLean}, Virginia, {USA}},
	shorttitle = {The relevance of software documentation, tools and technologies},
	doi = {10.1145/585058.585065},
	abstract = {This paper highlights the results of a survey of software professionals. One of the goals of this survey was to uncover the perceived relevance (or lack thereof) of software documentation, and the tools and technologies used to maintain, verify and validate such documents. The survey results highlight the preferences for and aversions against software documentation tools. Participants agree that documentation tools should seek to better extract knowledge from core resources. These resources include the system's source code, test code and changes to both. Resulting technologies could then help reduce the effort required for documentation maintenance, something that is shown to rarely occur. Our data reports compelling evidence that software professionals value technologies that improve automation of the documentation process, as well as facilitating its maintenance.},
	booktitle = {Proceedings of the 2002 {ACM} symposium on Document engineering},
	publisher = {{ACM}},
	author = {Forward, A. and Lethbridge, T. C.},
	year = {2002},
	note = {{ACM} {ID:} 585065},
	keywords = {documentation, documentation relevance},
	pages = {26–33}
},


@inproceedings{tilley_1992,
	address = {New York, {NY}, {USA}},
	series = {{CASCON} '92},
	title = {Documenting-in-the-large vs. documenting-in-the-small
},
	isbn = {{1-58113-696-X}},
	location = {San Francisco, {CA}, {USA}},
	booktitle = {Proceedings of CASCON’93},
	publisher = {IBM Centre for Advanced Studies},
	author = {Tilley, S.},
	year = {1993},
	pages = {1083–90}
},


@inproceedings{cioch_96,
	address = {New York, {NY}, {USA}},
	series = {{ICSM} '96},
	title = {A documentation suite for maintenance programmers},
	location = {San Francisco, {CA}, {USA}},
	booktitle = {Proceedings of the 1996 International Conference on Software Maintenance},
	publisher = {IEEE},
	author = {Cioch, F. A. and Palazzolo, M.},
	year = {1996},
	pages = {286–95}
},


@book{grubb2003software,
  title={Software maintenance: concepts and practice},
  author={Grubb, Pppp and Takang, Aaaa Aaaa},
  isbn={9789812384263},
  lccn={2005297903},
  url={http://books.google.com/books?id=7vrctiaX-aUC},
  year={2003},
  publisher={World Scientific}
}



@online{pep_374,
	title = {{PEP} 374 -- Choosing a distributed {VCS} for the Python project},
	url = {http://www.python.org/dev/peps/pep-0374/},
	urldate = {2010-07-23},
	year = 2010,
	author = {Cannon, Bbbbb and Turnbull, Stephen J. and Vassalotti, Alexandre and Warsaw, Barry},
	howpublished = {http://www.python.org/dev/peps/pep-0374/},
}
